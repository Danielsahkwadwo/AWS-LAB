AWSTemplateFormatVersion: "2010-09-09"
Description: "IAM Automation Lab - Creates IAM Users, Groups, and EventBridge Rule (Unique Naming)"

Parameters:
  StackPrefix:
    Type: String
    Default: "IAMLab"
    Description: "Prefix to uniquely identify resources"

  S3UserName:
    Type: String
    Default: "s3-user"
    Description: "IAM username for S3 access"

  EC2UserName:
    Type: String
    Default: "ec2-user"
    Description: "IAM username for EC2 access"

  S3UserEmail:
    Type: String
    Default: "s3user@example.com"
    Description: "Email for the S3 user"

  EC2UserEmail:
    Type: String
    Default: "ec2user@example.com"
    Description: "Email for the EC2 user"

Resources:
  # 1. Unique One-Time Password in Secrets Manager
  TempPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${StackPrefix}-OneTimePassword-${AWS::StackName}"
      Description: "Temporary password for IAM users"
      GenerateSecretString:
        SecretStringTemplate: '{"Password":"Default@123"}'
        GenerateStringKey: "Password"
        PasswordLength: 12
        ExcludeCharacters: '"@/\'

  # 2. IAM Groups (Unique Naming)
  S3UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub "${StackPrefix}-S3Group-${AWS::StackName}"
      Policies:
        - PolicyName: !Sub "${StackPrefix}-S3ReadPolicy-${AWS::StackName}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:ListBucket"
                Resource: "*"

  EC2UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub "${StackPrefix}-EC2Group-${AWS::StackName}"
      Policies:
        - PolicyName: !Sub "${StackPrefix}-EC2ReadPolicy-${AWS::StackName}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "ec2:DescribeInstances"
                Resource: "*"

  # 3. IAM Users
  S3User:
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref S3UserName
      Groups:
        - !Ref S3UserGroup
      LoginProfile:
        Password: !Sub "{{resolve:secretsmanager:${StackPrefix}-OneTimePassword-${AWS::StackName}:SecretString:Password}}"
        PasswordResetRequired: true

  EC2User:
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref EC2UserName
      Groups:
        - !Ref EC2UserGroup
      LoginProfile:
        Password: !Sub "{{resolve:secretsmanager:${StackPrefix}-OneTimePassword-${AWS::StackName}:SecretString:Password}}"
        PasswordResetRequired: true

  # 4. Store User Emails in Parameter Store
  S3UserEmailParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/IAM/${StackPrefix}-${S3UserName}-email-${AWS::StackName}"
      Type: String
      Value: !Ref S3UserEmail

  EC2UserEmailParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/IAM/${StackPrefix}-${EC2UserName}-email-${AWS::StackName}"
      Type: String
      Value: !Ref EC2UserEmail

  # 5. EventBridge Rule (Unique Naming)
  IAMUserEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${StackPrefix}-IAMUserCreationRule-${AWS::StackName}"
      EventPattern:
        source:
          - "aws.iam"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "iam.amazonaws.com"
          eventName:
            - "CreateUser"
      Targets:
        - Arn: !GetAtt IAMUserLambda.Arn
          Id: "IAMUserLambdaTarget"

  # 6. Unique Lambda Function
  IAMUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${StackPrefix}-LogNewIAMUsers-${AWS::StackName}"
      Runtime: python3.9
      Role: !GetAtt IAMUserLambdaRole.Arn
      Handler: "index.lambda_handler"
      Code:
        ZipFile: |
          import boto3
          import json
          import logging

          def lambda_handler(event, context):
              ssm = boto3.client('ssm')
              secretsmanager = boto3.client('secretsmanager')

              # Extract username from event
              user_name = event['detail']['requestParameters']['userName']

              try:
                  # Retrieve email and password
                  email_param_name = f"/IAM/IAMLab-{user_name}-email-{context.invoked_function_arn.split(':')[6]}"
                  email = ssm.get_parameter(Name=email_param_name)['Parameter']['Value']
                  temp_password = secretsmanager.get_secret_value(SecretId=f"IAMLab-OneTimePassword-{context.invoked_function_arn.split(':')[6]}")['SecretString']

                  # Log the email and password
                  logging.info(f"New User Created: {user_name}")
                  logging.info(f"Email: {email}")
                  logging.info(f"Temporary Password: {temp_password}")
              except Exception as e:
                  logging.error(f"Error retrieving details for {user_name}: {str(e)}")

      Timeout: 10

  # IAM Role for Lambda (Unique Naming)
  IAMUserLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${StackPrefix}-IAMUserLambdaRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "${StackPrefix}-LambdaIAMUserLogPolicy-${AWS::StackName}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:GetParameter"
                  - "secretsmanager:GetSecretValue"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
